#include <iostream>
#include <vector>
#include <queue>

void addNum(std::priority_queue<int>& small, std::priority_queue<int, std::vector<int>, std::greater<int>>& large, int num) {
    if (small.empty() || num <= small.top()) {
        small.push(num);
    } else {
        large.push(num);
    }

    // Балансировка размеров куч, чтобы обеспечить правильную медиану
    if (small.size() > large.size() + 1) {
        large.push(small.top());
        small.pop();
    } else if (large.size() > small.size()) {
        small.push(large.top());
        large.pop();
    }
}

double findMedian(const std::priority_queue<int>& small, const std::priority_queue<int, std::vector<int>, std::greater<int>>& large) {
    if (small.size() == large.size()) {
        return (double)(small.top() + large.top()) / 2;
    } else {
        return small.top();
    }
}

int main() { // Пример использования
    std::priority_queue<int> small;  // Максимальная куча для хранения меньшей половины чисел
    std::priority_queue<int, std::vector<int>, std::greater<int>> large;  // Минимальная куча для хранения большей половины чисел

    std::vector<int> nums = {1, 2, 3};

    for (int num : nums) {
        addNum(small, large, num);
        std::cout << "Median: " << findMedian(small, large) << std::endl;
    }

    return 0;
}
