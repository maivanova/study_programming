#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>

void solveNQueensHelper(std::vector<std::string>& board, int row, std::vector<std::vector<std::string>>& result);
bool isValid(const std::vector<std::string>& board, int row, int col);
std::vector<std::vector<std::string>> solveNQueens(int n);
int largestRectangleArea(const std::vector<int>& heights);

int main() {
    // Пример использования:
    int n = 4;
    std::vector<std::vector<std::string>> solutions = solveNQueens(n);

    for (const auto& solution : solutions) {
        for (const auto& row : solution) {
            std::cout << row << std::endl;
        }
        std::cout << std::endl;
    }

    return 0;
}

void solveNQueensHelper(std::vector<std::string>& board, int row, std::vector<std::vector<std::string>>& result) {
    int n = board.size();
    if (row == n) {
        result.push_back(board);
        return;
    }

    for (int col = 0; col < n; ++col) {
        if (isValid(board, row, col)) {
            board[row][col] = 'Q';
            solveNQueensHelper(board, row + 1, result);
            board[row][col] = '.';
        }
    }
}

bool isValid(const std::vector<std::string>& board, int row, int col) {
    int n = board.size();

    for (int i = 0; i < row; ++i) {
        if (board[i][col] == 'Q') {
            return false; // Check column
        }
        if (col - (row - i) >= 0 && board[i][col - (row - i)] == 'Q') {
            return false; // Check left diagonal
        }
        if (col + (row - i) < n && board[i][col + (row - i)] == 'Q') {
            return false; // Check right diagonal
        }
    }

    return true;
}

std::vector<std::vector<std::string>> solveNQueens(int n) {
    std::vector<std::vector<std::string>> result;
    std::vector<std::string> board(n, std::string(n, '.'));

    solveNQueensHelper(board, 0, result);

    return result;
}

int largestRectangleArea(const std::vector<int>& heights) {
    int n = heights.size();
    std::stack<int> s;
    int maxArea = 0;

    for (int i = 0; i <= n; ++i) {
        while (!s.empty() && (i == n || heights[i] < heights[s.top()])) {
            int height = heights[s.top()];
            s.pop();
            int width = s.empty() ? i : i - s.top() - 1;
            maxArea = std::max(maxArea, height * width);
        }

        s.push(i);
    }

    return maxArea;
}
